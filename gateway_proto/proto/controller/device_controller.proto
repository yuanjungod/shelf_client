syntax = "proto3";

package device.proto.controller;

option go_package = "guoxiaomei.com/device/proto/controller";

option java_multiple_files = true;
option java_outer_classname = "DeviceControllerProto";
option java_package = "com.guoxiaomei.device.proto.controller";

import "google/protobuf/any.proto"; 
import "google/protobuf/duration.proto"; 
import "device/proto/errors/device_errors.proto";

// CreateDeviceTokenRequest 代表控制侧通过 code 码获取设备访问令牌的请求.
message CreateDeviceTokenRequest {
  // 设备二维码中的 code 码.
  string code = 1;

  // 请求获取访问令牌的用户 ID.
  string user_id = 2;

  // 换取访问令牌的业务名.
  //
  // 业务名不同业务需要严格区分开.
  //
  // 其用途是业务回调时,确认具体的业务接口。
  string biz_name = 3;

  // 业务信息.
  //
  // 用于业务系统换取 code 时, 绑定具体的业务信息.
  string biz_info = 4;

  // 令牌是否有效检查间隔.
  //
  // 设备访问令牌是否有效不是通过时间机制进行的.
  //
  // 设备访问令牌的吊销需要业务方主动进行.
  //
  // 当设备访问令牌上无事件产生超过多长时间时,由相应的服务进行回调确认.
  .google.protobuf.Duration check_interval = 5;
}

// CreateDeviceTokenReply 代表控制侧通过 code 码获取设备访问令牌的响应.
message CreateDeviceTokenReply {
  .device.proto.errors.Error error = 1;

  // 访问设备的令牌.
  string device_token = 2;

  // 设备绑定货架 ID.
  //
  // 对于未绑定货架的设备，此值为空.
  //
  // 货架是逻辑上的概念,客户与果小美签约后.
  // 果小美会在客户的场地开店,摆放 1 - N 个货架.
  string shelf_id = 3;
}

// RevokeDeviceTokenRequest 代表控制侧主动撤销 device_token 的请求.
message RevokeDeviceTokenRequest {
  // 访问设备的令牌.
  string device_token = 1;
}

// RevokeDeviceTokenReply 代表控制侧主动撤销 device_token 的响应.
message RevokeDeviceTokenReply {
  .device.proto.errors.Error error = 1;
}

// BindDeviceAndStoreRequest 代表绑定店铺请求.
message BindDeviceAndStoreRequest {
  // 访问设备的令牌.
  string device_token = 1;

  // 设备绑定货架 ID.
  string shelf_id = 2;
}

// BindDeviceAndStoreResponse 代表绑定店铺响应.
message BindDeviceAndStoreResponse {
  .device.proto.errors.Error error = 1;

  // 设备绑定货架 ID.
  //
  // 正常绑定时返回请求的 shelf_id;
  // 店铺已经绑定时返回已绑定的 shelf_id;
  string shelf_id = 2;
}

message UnlockDeviceDoorRequest {
  // 访问设备的令牌.
  string device_token = 1;
}

message UnlockDeviceDoorReply {
  .device.proto.errors.Error error = 1;
}

message LockDeviceDoorRequest {
  // 访问设备的令牌.
  string device_token = 1;
}

message LockDeviceDoorResponse {
  .device.proto.errors.Error error = 1;
}

message ListDeviceEventsRequest {
  // 访问设备的令牌.
  string device_token = 1;

  // 接收事件的起始序号.
  //
  // device_token 上的事件串有递增的序号.
  // 传递最后一次接收到的事件序号即可接续上次的事件进行返回.
  uint32 sequence = 2;
}

message ListDeviceEventsResponse {
  repeated DeviceEvent events = 1;
}

message SubscribeDeviceEventsRequest {
  // 访问设备的令牌.
  string device_token = 1;

  // 接收事件的起始序号.
  //
  // device_token 上的事件串有递增的序号.
  // 传递最后一次接收到的事件序号即可接续上次的事件进行返回.
  uint32 sequence = 2;
}

// DeviceEvent 代表设备触发的事件.
message DeviceEvent {
  // seq > 0.
  uint32 sequence = 1;

  // 消息体.
  //
  // 所有消息体为定义在 device.proto.events 中的 message;
  .google.protobuf.Any payload = 2;
}

// DeviceController 提供设备的控制逻辑.
//
// 控制流程为:
//   1. 通过设备 code (二维码) 换取访问令牌.
//   2. 通过访问令牌控制设备.
service DeviceController {
  
  // CreateDeviceToken 通过设备二维码中的 code 换取访问令牌.
  //
  // code 一次性消费, 换取成功后 code 失效.
  //
  // 异常:
  //   1. device.proto.errors.ErrorCode.DEVICE_INVALID_CODE
  //   2. device.proto.errors.ErrorCode.DEVICE_OFFLINE
  //   3. device.proto.errors.ErrorCode.DEVICE_COMMUNICATION_FAIL
  //   4. device.proto.errors.ErrorCode.DEVICE_IS_IN_USE
  rpc CreateDeviceToken(CreateDeviceTokenRequest) returns (CreateDeviceTokenReply);

  // RevokeDeviceToken 主动撤销 device_token.
  //
  // device_token 撤销后，设备重新申请 code 并展示.
  rpc RevokeDeviceToken(RevokeDeviceTokenRequest) returns (RevokeDeviceTokenReply);

  // BindDeviceAndStore 绑定设备和店铺.
  //
  // 绑定店铺的逻辑，当前没有绑定店铺.
  //
  // 异常:
  //   1. device.proto.errors.ErrorCode.DEVICE_ACCESSTOKEN_INVALID
  //   2. device.proto.errors.ErrorCode.DEVICE_ALREADY_BIND_STORE
  rpc BindDeviceAndStore(BindDeviceAndStoreRequest) returns (BindDeviceAndStoreResponse);

  // UnlockDeviceDoor 解锁设备门.
  rpc UnlockDeviceDoor(UnlockDeviceDoorRequest) returns (UnlockDeviceDoorReply);

  // LockDeviceDoor 锁定设备门.
  rpc LockDeviceDoor(LockDeviceDoorRequest) returns (LockDeviceDoorResponse);

  // ListDeviceEvents 获取设备事件.
  //
  // 获取 AccessToken 对应业务流上发生的事件列表.
  rpc ListDeviceEvents(ListDeviceEventsRequest) returns (ListDeviceEventsResponse);

  // SubscribeDeviceEvents 订阅设备事件.
  rpc SubscribeDeviceEvents(SubscribeDeviceEventsRequest) returns (stream DeviceEvent);
}
