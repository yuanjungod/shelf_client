lock API使用说明：
1.bool getLockState(int fd)    查询锁状态   参数：文件操作符   返回值:true开  false关
2.bool getDoorState(int fd)    查询门状态   参数：文件操作符   返回值:true开  false关
3.int open_door(int fd)        开锁         参数：文件操作符   返回值:<0 失败 其他正常
4.int close_door(int fd)       关锁         参数：文件操作符   返回值:<0 失败 其他正常
5.int lock init()              锁初始化     参数：无           返回值:<0 失败 其他正常
6.int lock_deinit(int fd)      锁去初始化   参数：文件操作符   返回值:<0 失败 其他正常

====================lock.h=====================
#ifndef _LOCK_H
#define _LOCK_H

#include <stdio.h>
#include <fcntl.h>              /* open() */
#include <sys/types.h>          /* open() */
#include <sys/stat.h>           /* open() */
#include <asm/ioctl.h>
#include <linux/parport.h>
#include <linux/ppdev.h>

#include <stdbool.h>
#include <sys/io.h>
#include <unistd.h>//sleep
#include <sys/ioctl.h>


int lock_init(void);

int lock_deinit(int fd);

int open_door(int fd);

int close_door(int fd);

bool getLockState(int fd);

bool getDoorState(int fd);

#endif //_LOCK_H


====================lock.c=====================
#include "lock.h"


#define DEVICE "/dev/parport0"
#define BASEADDR 0x378
#define STATUSADDR 0x379

int lock_init(void)
{
        int fd;
        unsigned char data;

        if ((fd=open(DEVICE, O_RDWR)) < 0) {
                fprintf(stderr, "can not open %s\n", DEVICE);
                return -1;
        }
        if (ioctl(fd, PPCLAIM)) {
                perror("PPCLAIM");
                close(fd);
                return -2;
        }

        int mode = IEEE1284_MODE_ECP;
        int res = ioctl(fd, PPSETMODE, &mode);
        //setto output direction
        data = 0;
        res = ioctl(fd, PPDATADIR, data);
        return fd;
}

int lock_deinit(int fd)
{
        if(ioctl(fd, PPRELEASE)) {
                perror("PPCLAIM");
                close(fd);
                return -2;
        }
        close(fd);
        return 0;
}

int open_door(int fd)
{
        unsigned char data = 0x01;
        //write_data(fd, 0x01);
        return (ioctl(fd, PPWDATA, &data));
}

int close_door(int fd)
{
        unsigned char data = 0x00;
        //write_data(fd, 0x00);
        return (ioctl(fd, PPWDATA, &data));
}

bool getLockState(int fd)
{
        int val;

        ioctl(fd, PPRSTATUS, &val);
        return ((val & PARPORT_STATUS_SELECT)==PARPORT_STATUS_SELECT) ? false : true;
}

bool getDoorState(int fd)
{
        int val;

        ioctl(fd, PPRSTATUS, &val);
        return ((val & PARPORT_STATUS_PAPEROUT)==PARPORT_STATUS_PAPEROUT) ? false : true;
}

///////////////////////////////////////////////////unused//////////////////////////////////////////
/* example how to write data */
int write_data(int fd, unsigned char data)
{
        return (ioctl(fd, PPWDATA, &data));
}

/* example how to read 8 bit from the data lines */
int read_data(int fd)
{
        unsigned char data;

        int mode = IEEE1284_MODE_ECP;
        int res=ioctl(fd, PPSETMODE, &mode);    /* ready to read ? */
        mode=255;
        res=ioctl(fd, PPDATADIR, &mode);        /* switch output driver off */
        printf("ready to read data !\n");
        fflush(stdout);
        sleep(10);
        res=ioctl(fd, PPRDATA, &data);  /* now fetch the data! */
        printf("data=%02x\n", data);
        fflush(stdout);
        sleep(10);
        data=0;
        res=ioctl(fd, PPDATADIR, data);
        return 0;
}

/* example how to read the status lines. */
int status_pins(int fd)
{
        int val;

        ioctl(fd, PPRSTATUS, &val);
        val^=PARPORT_STATUS_BUSY; /* /BUSY needs to get inverted */
        printf("/BUSY  = %s\n",
                ((val & PARPORT_STATUS_BUSY)==PARPORT_STATUS_BUSY)?"HI":"LO");
        printf("ERROR  = %s\n",
                ((val & PARPORT_STATUS_ERROR)==PARPORT_STATUS_ERROR)?"HI":"LO");
        printf("SELECT = %s\n",
                ((val & PARPORT_STATUS_SELECT)==PARPORT_STATUS_SELECT)?"HI":"LO");
        printf("PAPEROUT = %s\n",
                ((val & PARPORT_STATUS_PAPEROUT)==PARPORT_STATUS_PAPEROUT)?"HI":"LO");
        printf("ACK = %s\n",
                ((val & PARPORT_STATUS_ACK)==PARPORT_STATUS_ACK)?"HI":"LO");
        return 0;
}



编译生成liblock.so供python调用:
gcc lock.c -fPIC -shared -o liblock.so


锁的C语言测试代码，依然使用该liblock.so：
====================lock_test.c=====================
#include "lock.h"

int main(int argc, char **argv)
{
        int fd;
        int i = 0;

        fd = lock_init();
        printf("fd=%d\n", fd);
        if(fd < 0)
        {
                printf("初始化锁失败\n");
                return fd;
        }

        while(1) {
                open_door(fd);
                printf("-----------开锁----------\n");
                i = 0;
                while(i < 10) {
                        printf("锁芯状态:       %s\n", getLockState(fd) ? "开" : "关");
                        printf("门状态:         %s\n", getDoorState(fd) ? "开" : "关");
                        sleep(1);
                        i++;
                }
                close_door(fd);
                printf("-----------关锁----------\n");
                i = 0;
                while(i < 10) {
                        printf("锁芯状态:       %s\n", getLockState(fd) ? "开" : "关");
                        printf("门状态:         %s\n", getDoorState(fd) ? "开" : "关");
                        sleep(1);
                        i++;
                }
        }
        lock_deinit(fd);
        return 0;
}


编译生成可执行文件：
gcc lock_test.c -L. -llock -o lock_test
测试：
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
ldd
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
sudo chmod 666 /dev/parport0
sudo chmod 666 /dev/ttyS0
./lock_test



锁的python测试代码：
====================lock_test.py=====================
import ctypes
from ctypes import *

lib = ctypes.cdll.LoadLibrary("./liblock.so")

func = lib.lock_init
func.restype = c_int
print "lock init ret:"
fd = func()
print fd


func = lib.open_door
func.restype = c_int
func(fd)

func = lib.getLockState
func.restype = c_bool
print "Lock Status:"
print func(fd)

func = lib.getDoorState
func.restype = c_bool
print "Door Status:"
print func(fd)

func = lib.close_door
func.restype = c_int
func

func = lib.lock_deinit
func.restype = c_int
func



测试：
python lock_test.py